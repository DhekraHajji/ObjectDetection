import cv2
import numpy as np

# Load YOLO
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")

# Load class names
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Open video capture
cap = cv2.VideoCapture("C:\\Users\\Dhekra Hajji\\OneDrive - CXG\\Bureau\\video.mp4")

# Get video frame dimensions
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Define the desired width and height for displaying the frames
display_width = 800
display_height = 600

# Calculate the scaling factors for resizing
scale_width = display_width / frame_width
scale_height = display_height / frame_height

# Define output video writer
output = cv2.VideoWriter("output.mp4", cv2.VideoWriter_fourcc(*"mp4v"), 30.0, (frame_width, frame_height))

while True:
    # Read frame from video capture
    ret, frame = cap.read()

    if not ret:
        break

    # Resize the frame to the desired display size
    frame = cv2.resize(frame, (display_width, display_height))

    # Get the frame dimensions
    height, width, _ = frame.shape

    # Create a blob from the frame
    blob = cv2.dnn.blobFromImage(frame, 1/255.0, (416, 416), swapRB=True, crop=False)

    # Set the input blob for the network
    net.setInput(blob)

    # Perform forward pass
    outs = net.forward(net.getUnconnectedOutLayersNames())

    # Initialize lists for storing bounding boxes, confidences, and class IDs
    boxes = []
    confidences = []
    class_ids = []

    # Process the output detections
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]

            if confidence > 0.5:
                # Scale the bounding box coordinates to the original frame dimensions
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                bbox_width = int(detection[2] * width)
                bbox_height = int(detection[3] * height)

                # Calculate the top-left corner of the bounding box
                x = int(center_x - bbox_width / 2)
                y = int(center_y - bbox_height / 2)

                # Add the bounding box, confidence, and class ID to the respective lists
                boxes.append([x, y, bbox_width, bbox_height])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # Apply non-maximum suppression to remove overlapping bounding boxes
    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Draw the bounding boxes and labels on the frame
    colors = np.random.uniform(0, 255, size=(len(classes), 3))
    for i in indices.flatten():
        x, y, w, h = boxes[i]
        label = f"{classes[class_ids[i]]}: {confidences[i]:.2f}"
        color = colors[class_ids[i]]

        cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
        cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    # Write the processed frame to the output video
    output.write(frame)

    # Display the resulting frame
    cv2.imshow("Object Detection", frame)

    # Check for 'q' key press to exit
    if cv2.waitKey(1) == ord("q"):
        break

# Release the video capture and output video writer
cap.release()
output.release()

# Close all OpenCV windows
cv2.destroyAllWindows()


